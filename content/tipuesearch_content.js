var tipuesearch = {"pages": [{'title': 'About', 'text': '課程名稱: 計算機程式 \n github倉庫： https://github.com/41423230zhang/W3 \n 課程評分: \n 學習心得報告 (60%)  - MS Teams 線上參與， 6人一組 每三週發表學習心得。 \n w3、w7、w10、w14、w17、w18 \n 學習心得報告主題: \n w3: 什麼是 git, GitHub, gist 與 cmsimde? 如何使用這些工具？為什麼要使用這些工具？ ( 動態模擬 ) \n w7: Brython 是什麼？如何在瀏覽器配置 Brython 環境？ Brython 能做什麼？ ( Brython ,  Examples ) \n w10: 如何在瀏覽器中模擬機器人作動？ ( 機器人作動 ) \n w14: 在瀏覽器中模擬機器人作動的目的是什麼？ ( otto_robot.7z ,\xa0 Plotter ,\xa0 open_duck_mini.7z  , https://webots.cloud/AcTNYs0 ) \n w17 ( 1b 採 Youtube 影片簡報 ): 計算機程式課程學到了什麼？ \n w18: 課程總結 \n 個人與分組網站維護 (40%)  - 每週至少兩次推送與課程進度相關的學習內容與心得。 \n w9 期中自評、w18 期末自評', 'tags': '', 'url': 'About.html'}, {'title': 'Code', 'text': 'w3_1 \n ################################################\n# 以下為導入 brython_robot 進行動態模擬的起始內容\n################################################\n# 導入 brython_robot.py 並設為 robot\nimport brython_robot as robot\n# 導入 Brython browser 模組中的 timer\n# 以便讓 AnimatedRobot 可以正常運作\nfrom browser import timer\n\n# 初始化世界與機器人\n# 利用 robot 物件中的 World 方法\n# 建立一個 10x10 的模擬世界\nxx=11\nyy=9\nw = robot.World(11,9)\nx = xx-1\ny = yy//2\nz = yy\nk = xx\n# 利用 robot 物件的 AnimatedRobot 方法\n# 針對 w 進行動態模擬, 且讓機器人位於 (1, 1)\nr = robot.AnimatedRobot(w, 1, 1)\n################################################\n# 範例 1\n# 基本變數與數值操作\n################################################\n# r 為透過上列程式所建立的動態模擬機器人物件\nsteps = 3\n# 讓機器人往前移動 steps 步數\ndef turn_left():\n    r.turn_left()\n    r.turn_left()\n    r.turn_left()\nfor two_line in range(y):\n    r.move(x)\n    r.turn_left()\n    r.move(1)\n    r.turn_left()\n    r.move(x)\n    turn_left()\n    r.move(1)\n    turn_left()\nif z % 2 != 0:\n    r.move(k-1) \n \n w3_2 \n # 初始化世界與機器人\n# 利用 robot 物件中的 World 方法\n# 建立一個 10x10 的模擬世界\nxx=11\nyy=9\nw = robot.World(xx,yy)\nx = xx//2\ny = yy-1\nz = xx\nk = yy\n# 利用 robot 物件的 AnimatedRobot 方法\n# 針對 w 進行動態模擬, 且讓機器人位於 (1, 1)\nr = robot.AnimatedRobot(w, 1, 1)\n################################################\n# 範例 1\n# 基本變數與數值操作\n################################################\n# r 為透過上列程式所建立的動態模擬機器人物件\nsteps = 3\n# 讓機器人往前移動 steps 步數\ndef turn_left():\nr.turn_left()\nr.turn_left()\nr.turn_left()\nfor two_line in range(x):\nr.turn_left()\nr.move(y)\nturn_left()\nr.move(1)\nturn_left()\nr.move(y)\nr.turn_left()\nr.move(1)\nif z % 2 != 0:\nr.turn_left()\nr.move(k-1) \n 1b_w4_showup.py \n import pandas as pd\n\n# === 讀取全班學生名單（學號\\t姓名） ===\nstud_df = pd.read_csv("1b_stud_list.csv", encoding=\'utf-8\')\nstud_df.drop_duplicates(subset=[stud_df.columns[0]], inplace=True)\n\n# 建立姓名→學號字典\nname_to_num = {}\nfor row in stud_df.iloc[:, 0]:\n    parts = row.split(\'\\t\')\n    if len(parts) >= 2:\n        student_num = parts[0].strip()\n        student_name = parts[1].strip()\n        name_to_num[student_name] = student_num\n\n# === 讀取出席名單 ===\nshow_df = pd.read_csv("1b_w4.csv", encoding=\'utf-16\')\nshow_df.drop_duplicates(subset=[show_df.columns[0]], inplace=True)\nnames_list = show_df.iloc[:, 0].dropna().tolist()\n\n# 將出席姓名轉為學號\nshowup_nums = []\nfor name in names_list:\n    if isinstance(name, str):\n        student_name = name.split(\'\\t\')[0].strip()  # 只取姓名部分\n        if student_name in name_to_num:\n            showup_nums.append(name_to_num[student_name])\n\n# 去重並依學號排序\nshowup_nums = sorted(list(set(showup_nums)), key=lambda x: int(x))\n\n# === 輸出 CSV ===\npd.DataFrame(showup_nums, columns=["學號"]).to_csv("1b_w4_showup.csv", index=False, encoding="utf-8-sig")\n\nprint(f"✅ 已將出席名單轉為學號並輸出至 1b_w4_showup.csv，共 {len(showup_nums)} 位學生")\n \n 1b_stud_list.py \n import pandas as pd\n\n# === 讀取全班學生名單 ===\nstud_df = pd.read_csv("1b_stud_list.csv", encoding=\'utf-8\')\nstud_df.drop_duplicates(subset=[stud_df.columns[0]], inplace=True)\n\n# 建立姓名→學號字典\na_dict = {}\nfor row in stud_df.iloc[:, 0]:\n    parts = row.split(\'\\t\')\n    if len(parts) >= 2:\n        student_num = parts[0].strip()\n        student_name = parts[1].strip()\n        a_dict[student_name] = student_num\n\n# 全部學生名單\nall_students = set(a_dict.keys())\n\n# === 讀取出席名單 ===\nshow_df = pd.read_csv("1b_w4.csv", encoding=\'utf-16\')\nshow_df.drop_duplicates(subset=[show_df.columns[0]], inplace=True)\nnames_list = show_df.iloc[:, 0].dropna().tolist()\n\n# 整理出席名單\nshowup_names = set()\nfor entry in names_list:\n    if isinstance(entry, str):\n        parts = entry.split(\'\\t\')\n        student_name = parts[0].strip() if len(parts) >= 1 else entry.strip()\n        if student_name:\n            showup_names.add(student_name)\n\n# === 比對出席與缺席 ===\npresent_names = showup_names & all_students\nabsent_names = all_students - showup_names\n\n# 轉換成列表（學號、姓名）\n# 這裡加上 key=lambda x: int(x[0])，依學號數值排序\npresent_list = sorted([(a_dict[name], name) for name in present_names], key=lambda x: int(x[0]))\nabsent_list = sorted([(a_dict[name], name) for name in absent_names], key=lambda x: int(x[0]))\n\n# === 輸出結果 ===\nprint("✅ 出席名單（依座號排序）：")\nfor i, (num, name) in enumerate(present_list, start=1):\n    print(f"{i:2d}. {num}\\t{name}")\n\nprint("\\n❌ 缺席名單（依座號排序）：")\nfor i, (num, name) in enumerate(absent_list, start=1):\n    print(f"{i:2d}. {num}\\t{name}")\n\n# === 輸出 CSV ===\npd.DataFrame(present_list, columns=["學號", "姓名"]).to_csv("1b_present.csv", index=False, encoding="utf-8-sig")\npd.DataFrame(absent_list, columns=["學號", "姓名"]).to_csv("1b_absent.csv", index=False, encoding="utf-8-sig")\n\nprint("\\n📁 已輸出兩份檔案：1b_present.csv（出席）與 1b_absent.csv（缺席）")\n \n 1b_w4_showup.py \n import pandas as pd\n\n# === 讀取全班學生名單（學號\\t姓名） ===\nstud_df = pd.read_csv("1b_stud_list.csv", encoding=\'utf-8\')\nstud_df.drop_duplicates(subset=[stud_df.columns[0]], inplace=True)\n\n# 建立姓名→學號字典\nname_to_num = {}\nfor row in stud_df.iloc[:, 0]:\n    parts = row.split(\'\\t\')\n    if len(parts) >= 2:\n        student_num = parts[0].strip()\n        student_name = parts[1].strip()\n        name_to_num[student_name] = student_num\n\n# === 讀取出席名單 ===\nshow_df = pd.read_csv("1b_w4.csv", encoding=\'utf-16\')\nshow_df.drop_duplicates(subset=[show_df.columns[0]], inplace=True)\nnames_list = show_df.iloc[:, 0].dropna().tolist()\n\n# 將出席姓名轉為學號\nshowup_nums = []\nfor name in names_list:\n    if isinstance(name, str):\n        student_name = name.split(\'\\t\')[0].strip()  # 只取姓名部分\n        if student_name in name_to_num:\n            showup_nums.append(name_to_num[student_name])\n\n# 去重並依學號排序\nshowup_nums = sorted(list(set(showup_nums)), key=lambda x: int(x))\n\n# === 輸出 CSV ===\npd.DataFrame(showup_nums, columns=["學號"]).to_csv("1b_w4_showup.csv", index=False, encoding="utf-8-sig")\n\nprint(f"✅ 已將出席名單轉為學號並輸出至 1b_w4_showup.csv，共 {len(showup_nums)} 位學生")\n \n', 'tags': '', 'url': 'Code.html'}, {'title': 'Brython', 'text': 'Brython  是一個將  Python  語法編譯為  JavaScript  的工具，能直接在瀏覽器中以  Python  撰寫前端網頁程式。 \n 1 add to 100 機器人巡邏 自由行 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  累加程式開始  \n \n  累加程式結束     機器人巡邏程式開始  \n \n  機器人巡邏程式結束  \n  機器人自由行程式開始  \n \n \n \n  機器人自由行程式結束  \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n', 'tags': '', 'url': 'Brython.html'}, {'title': 'Pyodide3', 'text': 'Pyodide3 則在  Pyodide  與  Pyodide2  頁面架構下，進一步導入  robot_w_world.py ，在既有的水平圍牆  north.png  與垂直圍牆  east.png  檔案之外，加入  carrot.png 、 grass.png  與  pale_grass.png  等圖檔。並且擴充可從 URL 讀進 json 格式的 world 變數功能，以便製作出更多元的場景任務，要求機器人執行。 \n 其中 src URL 變數，可以將網路上的機器人控制程式導入 Pyodide3 頁面外，world URL 變數則可以導入源自  Reeborg  機器人程式所設定的 json 格式場景。 \n 由於 Reeborg 系統中的 png 圖檔均非透明背景， robot_w_world.py \xa0必須利用 HTML 中的 CANVAS，將關鍵的白色背景，以透明的方式顯示。 \n src URL 變數讀進  turn_right 程式 ，而 world URL 變數則讀進  harvest2.json ，執行 結果 。 \n 讀進  harvest3.json , 執行 結果 。 \n \n \n \n version   hello   1 add to 100   機器人巡邏   自由行   numpy_ode \n  Ace Editor Scripts  \n \n \n \n \n \n \n \n \n  Editor 1  \n \n Run   Output   清除輸出區   Reload \n \n \n \n \n \n 從 1 累加到 100 part2: \n 1 add to 100 \n  Editor 2  \n \n Run   Output   清除輸出區   Reload \n \n \n \n \n \n \n', 'tags': '', 'url': 'Pyodide3.html'}]};